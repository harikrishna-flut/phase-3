# fraud_model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib

# Load dataset (you can use 'creditcard.csv' from Kaggle)
df = pd.read_csv("creditcard.csv")  # Replace with your path

# Split features and label
X = df.drop("Class", axis=1)
y = df["Class"]  # 1 = Fraud, 0 = Legitimate

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Save the model
joblib.dump(model, "fraud_detection_model.pkl")
print("Model saved.")
# app.py
from flask import Flask, request, jsonify
import numpy as np
import joblib
import pandas as pd

app = Flask(__name__)

# Load trained model
model = joblib.load("fraud_detection_model.pkl")

@app.route("/predict", methods=["POST"])
def predict():
    try:
        # Example: Receive JSON with a transaction's features
        data = request.get_json(force=True)

        # Convert to DataFrame (assuming features match model input)
        transaction = pd.DataFrame([data])

        # Predict
        prediction = model.predict(transaction)[0]
        probability = model.predict_proba(transaction)[0][1]

        return jsonify({
            "fraudulent": bool(prediction),
            "probability": round(probability, 4)
        })
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    app.run(debug=True)

